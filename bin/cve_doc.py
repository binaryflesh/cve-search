#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# cve_doc converts CVE to asciidoc
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2015-2018  Alexandre Dulaunoy - a@foo.be


import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import json
import re
import argparse

from lib.Query import apigetcve

def cve_doc(cve: str, fmt: str = 'asciidoc', api: str = 'http://cve.circl.lu/'):
    _cve = json.loads(apigetcve(api, cveid=cve))
    if not _cve:
        return False
    print(f"= Common Vulnerabilities and Exposures - {_cve['id']}")
    print(f"cve-search <{api}/cve/{_cve['id']}>")
    print(f"{_cve['id']},{_cve['Modified']}")
    print(":toc:")
    print(f"== {_cve['id']} Summary")
    print("\n"+_cve['summary'])
    print("\n== Vulnerable configurations\n")
    for vul in _cve['vulnerable_configuration']:
        print("* {}".format(re.sub(r'\n', '-', vul['title'])))
    if _cve.get('cvss'):
        print("\n== Common Vulnerability Scoring System")
        print(f"CVSS value:: {_cve['cvss']}")
    if _cve.get('impact'):
        print("\n== Impact Metrics")
        print("\n[cols=\"1,2\"]")
        print("|===")
        types = ['availability', 'confidentiality', 'integrity']
        for t in types:
            print(f"|{t.title()}")
            print(f"|{_cve['impact'][t]}")
        print("|===")
    if _cve.get('access'):
        print("\n== Access to the vulnerability")
        print("\n[cols=\"1,2\"]")
        print("|===")
        types = ['authentication', 'complexity', 'vector']
        for t in types:
            print(f"|{t.title()}")
            print(f"|{_cve['access'][t]}")
        print("|===")
    if _cve.get('references'):
        print("\n== References")
        if len(_cve['references']) > 1:
            for ref in _cve['references']:
                print(f"* {ref}")
        elif len(_cve['references']) == 1:
            ref = _cve['references'][0]
            print(f"* {ref}")

if __name__ == '__main__':
    argparser = argparse.ArgumentParser(description='')
    argparser.add_argument('-c', help='cve to convert', default=False)
    argparser.add_argument('-f', default='asciidoc', help='output format : asciidoc')
    argparser.add_argument('-a', default='http://cve.circl.lu/', help='cve-search uri')
    args = argparser.parse_args()
    if args.c:
        cve_doc(cve=args.c, fmt=args.f, api=args.a)
    else:
        print('CVE id missing')